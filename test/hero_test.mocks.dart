// Mocks generated by Mockito 5.3.0 from annotations
// in angular_tour_of_heroes/test/hero_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:ngrouter/src/location/location.dart' as _i4;
import 'package:ngrouter/src/location/location_strategy.dart' as _i2;
import 'package:ngrouter/src/route_definition.dart' as _i6;
import 'package:ngrouter/src/route_path.dart' as _i3;
import 'package:ngrouter/src/router/router_state.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationStrategy_0 extends _i1.SmartFake
    implements _i2.LocationStrategy {
  _FakeLocationStrategy_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeObject_1 extends _i1.SmartFake implements Object {
  _FakeObject_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRoutePath_2 extends _i1.SmartFake implements _i3.RoutePath {
  _FakeRoutePath_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i4.Location {
  @override
  _i2.LocationStrategy get locationStrategy => (super.noSuchMethod(
      Invocation.getter(#locationStrategy),
      returnValue:
          _FakeLocationStrategy_0(this, Invocation.getter(#locationStrategy)),
      returnValueForMissingStub: _FakeLocationStrategy_0(
          this, Invocation.getter(#locationStrategy))) as _i2.LocationStrategy);
  @override
  String path() => (super.noSuchMethod(Invocation.method(#path, []),
      returnValue: '', returnValueForMissingStub: '') as String);
  @override
  String hash() => (super.noSuchMethod(Invocation.method(#hash, []),
      returnValue: '', returnValueForMissingStub: '') as String);
  @override
  String normalize(String? url) =>
      (super.noSuchMethod(Invocation.method(#normalize, [url]),
          returnValue: '', returnValueForMissingStub: '') as String);
  @override
  String normalizePath(String? path) =>
      (super.noSuchMethod(Invocation.method(#normalizePath, [path]),
          returnValue: '', returnValueForMissingStub: '') as String);
  @override
  String prepareExternalUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#prepareExternalUrl, [url]),
          returnValue: '', returnValueForMissingStub: '') as String);
  @override
  void go(String? path, [String? query = r'']) =>
      super.noSuchMethod(Invocation.method(#go, [path, query]),
          returnValueForMissingStub: null);
  @override
  void replaceState(String? path, [String? query = r'']) =>
      super.noSuchMethod(Invocation.method(#replaceState, [path, query]),
          returnValueForMissingStub: null);
  @override
  void forward() => super.noSuchMethod(Invocation.method(#forward, []),
      returnValueForMissingStub: null);
  @override
  void back() => super.noSuchMethod(Invocation.method(#back, []),
      returnValueForMissingStub: null);
  @override
  Object subscribe(void Function(Object)? onNext,
          [void Function(Object)? onThrow, void Function()? onReturn]) =>
      (super.noSuchMethod(
          Invocation.method(#subscribe, [onNext, onThrow, onReturn]),
          returnValue: _FakeObject_1(
              this, Invocation.method(#subscribe, [onNext, onThrow, onReturn])),
          returnValueForMissingStub: _FakeObject_1(
              this,
              Invocation.method(
                  #subscribe, [onNext, onThrow, onReturn]))) as Object);
}

/// A class which mocks [RouterState].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterState extends _i1.Mock implements _i5.RouterState {
  @override
  List<_i6.RouteDefinition> get routes =>
      (super.noSuchMethod(Invocation.getter(#routes),
              returnValue: <_i6.RouteDefinition>[],
              returnValueForMissingStub: <_i6.RouteDefinition>[])
          as List<_i6.RouteDefinition>);
  @override
  Map<String, String> get parameters => (super.noSuchMethod(
      Invocation.getter(#parameters),
      returnValue: <String, String>{},
      returnValueForMissingStub: <String, String>{}) as Map<String, String>);
  @override
  bool get fromPopState => (super.noSuchMethod(Invocation.getter(#fromPopState),
      returnValue: false, returnValueForMissingStub: false) as bool);
  @override
  _i3.RoutePath get routePath => (super.noSuchMethod(
          Invocation.getter(#routePath),
          returnValue: _FakeRoutePath_2(this, Invocation.getter(#routePath)),
          returnValueForMissingStub:
              _FakeRoutePath_2(this, Invocation.getter(#routePath)))
      as _i3.RoutePath);
  @override
  String get fragment => (super.noSuchMethod(Invocation.getter(#fragment),
      returnValue: '', returnValueForMissingStub: '') as String);
  @override
  String get path => (super.noSuchMethod(Invocation.getter(#path),
      returnValue: '', returnValueForMissingStub: '') as String);
  @override
  Map<String, String> get queryParameters => (super.noSuchMethod(
      Invocation.getter(#queryParameters),
      returnValue: <String, String>{},
      returnValueForMissingStub: <String, String>{}) as Map<String, String>);
  @override
  String toUrl() => (super.noSuchMethod(Invocation.method(#toUrl, []),
      returnValue: '', returnValueForMissingStub: '') as String);
}
